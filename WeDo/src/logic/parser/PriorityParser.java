/**
 * 
 */
package logic.parser;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;

import logic.command.commandList.Command;
import logic.utility.KeyMatcher;
import logic.utility.StringHandler;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multimap;

import definedEnumeration.Priority;

/**
 * @author Kuan Tien Long
 *
 */
public class PriorityParser {

    private String wordRemaining;
    private String wordUsed;
    private Priority priority;

    /**
     * <p>
     * The source will be parsed to see if it contains date.
     * 
     * @param source
     *            the String to be parsed
     * @return if source contains valid priority
     */
    public boolean tryParse(String source) {
        
        
        priority = KeyMatcher.getMatchedKey(createPriorityLevelFakeMultiMap(),
                source);
        if (isPriorityParsed()) {
            wordUsed = KeyMatcher.getMatchedWord(createPriorityLevelFakeMultiMap(),
                    source);
            
            assert(wordUsed!= null);
            assert(!wordUsed.isEmpty());
            
            wordRemaining = StringHandler.removeFirstMatched(source,
                    wordUsed);

            return true;
        }
        else
        {
            return false;
        }
    }


    /**
     * @return if priority is successfully parsed
     */
    private boolean isPriorityParsed() {
        return priority != null;

    }


    public Priority getPriority() {
        return priority;
    }

    public String getWordUsed() {
        return wordUsed;
    }

    public String getWordRemaining() {
        return wordRemaining;
    }

    /**
     * This function create a map of commands and add them to the multi map. The
     * real multi map will be generated by reading a file which consist the
     * available action word to match
     */
    private Multimap<Priority, String> createPriorityLevelFakeMultiMap() {
        
        
        final String PRIORITY_WORD[] = {"priority", "pri"};
        final String KEYWORDS_FOR_HIGH[] = {"high", "urgent", "top", "crucial",
                "important"};
        final String KEYWORDS_FOR_MEDIUM[] = {"medium", "med", "normal", "neutral", "moderate"};
        final String KEYWORDS_FOR_LOW[] = {"low", "none", "never", "no",
                "ignore"};
        
        
  
        
        Multimap<Priority, String> availableActions = ArrayListMultimap
                .create();

        final Map<Priority, Collection<String>> highPriorityActions = ImmutableMap
                .<Priority, Collection<String>> of(Priority.PRIORITY_HIGH,
                        getPermuntation(PRIORITY_WORD, KEYWORDS_FOR_HIGH));
        final Map<Priority, Collection<String>> mediumPriorityActions = ImmutableMap
                .<Priority, Collection<String>> of(Priority.PRIORITY_MEDIUM,
                        getPermuntation(PRIORITY_WORD, KEYWORDS_FOR_MEDIUM));
        final Map<Priority, Collection<String>> lowPriorityActions = ImmutableMap
                .<Priority, Collection<String>> of(Priority.PRIORITY_LOW,
                        getPermuntation(PRIORITY_WORD, KEYWORDS_FOR_LOW));

        addMapToMultiMap(highPriorityActions, availableActions);
        addMapToMultiMap(mediumPriorityActions, availableActions);
        addMapToMultiMap(lowPriorityActions, availableActions);

        return availableActions;
    }

    private void addMapToMultiMap(final Map<Priority, Collection<String>> map,
            Multimap<Priority, String> availableActions) {
        for (Priority key : map.keySet()) {
            availableActions.putAll(key, map.get(key));
        }
    }
    
    private ArrayList<String> getPermuntation(String priorityWords[], String keyWords[])
    {
        ArrayList<String> list = new ArrayList<String>();
        
        for(String priorityWord : priorityWords)
        {
            for(String keyWord :keyWords)
            {
                list.add(priorityWord + " " + keyWord);
            }
        }
        
        for (String keyWord :keyWords)
        {
            for(String priorityWord : priorityWords)
            {
                list.add(keyWord + " " + priorityWord); 
            }
        }
        
        return list;        
        
    }

}
