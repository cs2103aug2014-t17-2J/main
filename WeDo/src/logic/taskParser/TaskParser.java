/**
 * 
 */
package logic.taskParser;

import java.util.Arrays;
import java.util.Collection;
import java.util.Map;

import logic.taskParser.taskFieldSetter.TaskFieldSetter;
import logic.taskParser.taskFieldSetter.TaskPriorityFieldSetter;
import logic.utility.Task;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multimap;

/**
 * @author Kuan Tien Long
 *
 */
public interface TaskParser {

    Task buildTask(StringBuilder userInputBuilder);

    /**
     * This function create a map of commands and add them to the multi map. The
     * real multi map will be generated by reading a file which consist the
     * available action word to match
     */

    default Multimap<TaskFieldSetter, String> createFakeMultiMapForPriority() {

        Multimap<TaskFieldSetter, String> availableActions = ArrayListMultimap
                .create();
        TaskFieldSetter priorityCommand = new TaskPriorityFieldSetter();

        final Map<TaskFieldSetter, Collection<String>> priorityActions = ImmutableMap
                .<TaskFieldSetter, Collection<String>> of(priorityCommand,
                        Arrays.asList("priority", "pri"));

        for (TaskFieldSetter key : priorityActions.keySet()) {
            availableActions.putAll(key, priorityActions.get(key));
        }

        return availableActions;

    }

    default Multimap<String, String> createFakeMultiMapForShortForm() {

        Multimap<String, String> mappedWords = ArrayListMultimap.create();
        String tomorrow = "tomorrow";

        final Map<String, Collection<String>> tommorrowMap = ImmutableMap
                .<String, Collection<String>> of(tomorrow,
                        Arrays.asList("tml", "tmr", "nxt day"));

        for (String key : tommorrowMap.keySet()) {
            mappedWords.putAll(key, tommorrowMap.get(key));
        }

        return mappedWords;

    }

}