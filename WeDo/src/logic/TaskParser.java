/**
 * 
 */
package logic;

import java.util.Arrays;
import java.util.Collection;
import java.util.Map;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multimap;

/**
 * @author Kuan Tien Long
 *
 */
public class TaskParser {
    
    private final String actionsDelimiter = "-";
    private Multimap<TaskAttribute, String> availableActions =  ArrayListMultimap.create();
    
    public TaskParser()
    {
        createFakeMultiMap(); 
    }
    
    public Task buildTask(String userInput) {
        String[] actionsTokens = StringHandler.splitString(userInput,
                actionsDelimiter);
        
        Task task = createTask(actionsTokens);
        System.out.println(Arrays.toString(actionsTokens));

        return task;

    }
    
    /**
     * This function create a map of commands and add them to the multi map. 
     * The real multi map will be generated by reading a file which consist the available action word to match
     */
    public void createFakeMultiMap()
    {
        TaskCommandAttribute addCommand = new TaskCommandAttribute();
        TaskCommandAttribute clearCommand = new TaskCommandAttribute();
        TaskCommandAttribute deleteCommand = new TaskCommandAttribute();
        TaskCommandAttribute searchCommand = new TaskCommandAttribute();
        TaskCommandAttribute exitCommand = new TaskCommandAttribute();
        TaskPriorityAttribute priorityCommand = new TaskPriorityAttribute();

        
        final Map<TaskAttribute, Collection<String>> addActions = ImmutableMap.<TaskAttribute, Collection<String>>of(
                addCommand, Arrays.asList("-add", "-a", "add", "-create", "-cre8"));
        final Map<TaskAttribute, Collection<String>> clearActions = ImmutableMap.<TaskAttribute, Collection<String>>of(
                clearCommand, Arrays.asList("-clear", "-cl", "-c", "-delete all", "-d all", "-clear screen", "clear"));
        final Map<TaskAttribute, Collection<String>> deleteActions = ImmutableMap.<TaskAttribute, Collection<String>>of(
                deleteCommand, Arrays.asList("-delete", "-d", "delete", "remove", "-remove"));
        final Map<TaskAttribute, Collection<String>> exitActions = ImmutableMap.<TaskAttribute, Collection<String>>of(
                searchCommand, Arrays.asList("-exit", "-e", "exit", "-quit", "-q", "quit", "alt qq", "leave", "-leave", "-bye"));
        final Map<TaskAttribute, Collection<String>> searchActions = ImmutableMap.<TaskAttribute, Collection<String>>of(
                exitCommand, Arrays.asList("-search", "search", "-s", "-find", "-f", "find"));
        final Map<TaskAttribute, Collection<String>> priorityActions = ImmutableMap.<TaskAttribute, Collection<String>>of(
                priorityCommand, Arrays.asList("-priority", "-pri", "-p", "priority", "pri"));
        
        addMapToMultiMap(addActions, availableActions);
        addMapToMultiMap(clearActions, availableActions);
        addMapToMultiMap(deleteActions, availableActions);
        addMapToMultiMap(exitActions, availableActions);
        addMapToMultiMap(searchActions, availableActions);
        addMapToMultiMap(priorityActions, availableActions);
    }

    private void addMapToMultiMap(final Map<TaskAttribute, Collection<String>> map, Multimap<TaskAttribute, String> availableActions) {
        for (TaskAttribute key : map.keySet()) {
            availableActions.putAll(key, map.get(key));
          }
    }

    /**
     * @param commandTokens
     * @return
     */
    private Task createTask(String[] actionTokens) 
    {
        Task task = new Task();

        enableSearching();
        
        for(String token : actionTokens )
        {
            setTaskAttribute(token, task);
        }
        
        return task;
    }

    /**
     * @param tokens
     */
    private void setTaskAttribute(String token, Task task) 
    {
        String operation = StringHandler.getFirstWord(token);
        String arguments = StringHandler.removeFirstMatched(token, operation);
        TaskAttribute taskAttribute = determineAttribute(operation);
        taskAttribute.set(task, arguments);
        
        System.out.println("Opeartion :" + operation + "  arguments : " + arguments); 
    }

    /**
     * @param operation
     * @return 
     */
    private TaskAttribute determineAttribute(String operation) 
    {
        return null;
        // TODO Auto-generated method stub
        
    }
    
    
    private boolean canSearchCommand;
    private boolean canSearchDate;
    private boolean canSearchPriority;
    
    
    private void enableSearching()
    {
        canSearchCommand = true;
        canSearchDate = true;
        canSearchPriority = true;
    }
    
    private boolean isCommandAction()
    {
        if(!canSearchCommand)
        {
            return false;
        }
        else
        {
            disableRepeatedSearch(canSearchCommand);
            return true;
        }
    }

    private void disableRepeatedSearch(boolean searchOpeartion) 
    {
        searchOpeartion = false;
    }
    
    private boolean isDateAction()
    {
        if(!canSearchDate)
        {
            return false;
        }
        else
        {
            disableRepeatedSearch(canSearchDate);
            return true;
        }
    }

    private boolean isPriorityAction()
    {
        if(!canSearchPriority)
        {
            return false;
        }
        else
        {
            disableRepeatedSearch(canSearchPriority);
            return true;
        }
    }
    
    
    private boolean isInvalidAction()
    {
        return true;
    }
}